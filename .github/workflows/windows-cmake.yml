name: Windows-Builds

on:
  workflow_call:
    inputs:
      checkout-ref:
        required: true
        description: "The ref we want to compile"
        type: string
      full-matrix:
        required: true
        description: "Build the full matrix"
        type: boolean
      sccache-mode:
        required: true
        description: "READ_WRITE or DISABLED"
        type: string
      vcpkg-cache-mode:
        required: true
        description: "read or readwrite"
        type: string
      execute-integration-tests:
        required: true
        description: "Integration tests require credentials."
        type: boolean

permissions:
  contents: read

jobs:
  cmake:
    name: cmake + ${{ matrix.msvc }} + ${{ matrix.arch }} + ${{ matrix.build_type }} + ${{ matrix.shard }}
    runs-on: windows-2022
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      # Continue other builds even if one fails
      fail-fast: false
      matrix:
        exclude-from-full-trick: [ true ]
        msvc: [ msvc-2022 ]
        build_type: [ Debug, Release ]
        # arrow is only supported on 'x64 | (arm64 & !windows)',
        # which does not match x86-windows
        arch: [ x64 ]
        shard: [ All ]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        ref: ${{ inputs.checkout-ref }}
    - uses: google-github-actions/auth@v2
      if: ${{ inputs.sccache-mode == 'READ_WRITE' && inputs.vcpkg-cache-mode == 'readwrite' }}
      with:
        create_credentials_file: true
        credentials_json: ${{ secrets.BUILD_CACHE_KEY }}
    - uses: actions/setup-python@v5
      id: py311
      with:
        python-version: '3.11'
    - uses: google-github-actions/setup-gcloud@v2
      env:
        CLOUDSDK_PYTHON: ${{ steps.py311.outputs.python-path }}
    - name: Dynamic Configuration
      id: dynamic
      shell: bash
      run: |
        echo "vcpkg-version=$(cat ci/etc/vcpkg-version.txt)" >> "${GITHUB_OUTPUT}"
        all_features=(bigquery_unified)
        echo "features=${features:1}" >> "${GITHUB_OUTPUT}"
    - name: Pre Build Disk Space
      shell: bash
      run: df -m
    - name: Download and Install sccache
      if: ${{ inputs.sccache-mode != 'DISABLED' }}
      working-directory: "${{runner.temp}}"
      shell: bash
      run: |
        mkdir -p /c/Users/runneradmin/.cargo/bin
        curl -fsSL https://github.com/mozilla/sccache/releases/download/v0.9.1/sccache-v0.9.1-x86_64-pc-windows-msvc.tar.gz | \
          tar -zxf - --strip-components=1
        chmod +x sccache.exe
        mv sccache.exe /c/Users/runneradmin/.cargo/bin
    - name: Download and Install vcpkg
      shell: bash
      run: |
        cd "${TEMP}"
        mkdir -p .build/vcpkg
        curl -fsSL "https://github.com/microsoft/vcpkg/archive/${{ steps.dynamic.outputs.vcpkg-version }}.tar.gz" |
            tar -C .build/vcpkg --strip-components=1 -zxf -
        .build/vcpkg/bootstrap-vcpkg.sh -disableMetrics
    # go/github-actions#gha-bestpractices explains why we use a SHA instead of
    # a named version for this runner. We could avoid using this runner with the
    # ideas from:
    #   https://github.com/microsoft/vswhere/wiki/Find-VC
    # Note that in other runners the publisher is GitHub. If we trust GitHub
    # to run the VM, we should trust their runners.
    - uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # @v1.13.0
      with:
        arch: ${{ matrix.arch }}
    - name: Build google-cloud-cpp-bigquery
      shell: bash
      run: |
        export VCPKG_ROOT="${TEMP}/.build/vcpkg"
        export CLOUDSDK_PYTHON="${{ steps.py311.outputs.python-path }}"
        # Put the CMake output in a directory with more space and keep it short
        # to avoid running into the MSVC limits.
        export CMAKE_OUT='c:\b'
        export EXECUTE_INTEGRATION_TESTS=${{ inputs.execute-integration-tests }}
        ci/gha/builds/windows-cmake.sh ${{ matrix.build_type }} ${{ steps.dynamic.outputs.features }}
    - name: Post Build Disk Space
      shell: bash
      run: df -m
    env:
      SCCACHE_GCS_BUCKET: cloud-cpp-community-gha-cache
      SCCACHE_GCS_KEY_PREFIX: bigquery-sccache/${{ matrix.msvc }}/${{ matrix.arch}}/${{ matrix.build_type }}
      SCCACHE_GCS_RW_MODE: ${{ inputs.sccache-mode }}
      SCCACHE_IGNORE_SERVER_IO_ERROR: 1
      VCPKG_BINARY_SOURCES: x-gcs,gs://cloud-cpp-community-gha-cache/bigquery-vcpkg-cache/${{ matrix.msvc }},${{ inputs.vcpkg-cache-mode }}
      VCPKG_TRIPLET: ${{ matrix.arch }}-windows
      GHA_TEST_BUCKET: "gcs-grpc-team-cloud-cpp-testing-bucket"
