# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load(":bigquery_unified_client_unit_tests.bzl", "bigquery_unified_client_unit_tests")
load(":google_cloud_cpp_bigquery_bigquery_unified.bzl", "google_cloud_cpp_bigquery_bigquery_unified_hdrs", "google_cloud_cpp_bigquery_bigquery_unified_srcs")
load(":google_cloud_cpp_bigquery_bigquery_unified_mocks.bzl", "google_cloud_cpp_bigquery_bigquery_unified_mocks_hdrs")
load(":google_cloud_cpp_bigquery_common.bzl", "google_cloud_cpp_bigquery_common_hdrs", "google_cloud_cpp_bigquery_common_srcs")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])  # Apache 2.0

# Enable the config when the bool flag is visible.
# https://github.com/googleapis/google-cloud-cpp/pull/14961
# config_setting(
#     name = "enable_opentelemetry",
#     flag_values = {
#         "@google_cloud_cpp//:enable_opentelemetry": "true",
#     },
# )

filegroup(
    name = "common_public_hdrs",
    srcs = [h for h in google_cloud_cpp_bigquery_common_hdrs if not h.startswith("internal/")],
    visibility = ["//:__pkg__"],
)

cc_library(
    name = "google_cloud_cpp_bigquery_common",
    srcs = google_cloud_cpp_bigquery_common_srcs,
    hdrs = google_cloud_cpp_bigquery_common_hdrs,
    visibility = ["//:__pkg__"],
    deps = [
        "@com_google_googleapis_google_cloud_cpp//:common",
    ],
)

filegroup(
    name = "public_hdrs",
    srcs = [h for h in google_cloud_cpp_bigquery_bigquery_unified_hdrs if not h.startswith("internal/")],
    visibility = ["//:__pkg__"],
)

filegroup(
    name = "mocks",
    srcs = [h for h in google_cloud_cpp_bigquery_bigquery_unified_mocks_hdrs if not h.startswith("internal/")],
    visibility = ["//:__pkg__"],
)

cc_library(
    name = "google_cloud_cpp_bigquery_bigquery_unified",
    srcs = google_cloud_cpp_bigquery_bigquery_unified_srcs,
    hdrs = google_cloud_cpp_bigquery_bigquery_unified_hdrs,
    # Enable the config when the bool flag is visible.
    # https://github.com/googleapis/google-cloud-cpp/pull/14961
    # defines = select({
    #     ":enable_opentelemetry": [
    #         # Enable OpenTelemetry features in google-cloud-cpp
    #         "GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY",
    #     ],
    #     "//conditions:default": [],
    # }),
    visibility = ["//:__pkg__"],
    deps = [
        ":google_cloud_cpp_bigquery_common",
        "@com_google_googleapis_google_cloud_cpp//:bigquery",
        "@com_google_googleapis_google_cloud_cpp//:bigquerycontrol",
        "@libarrow",
    ],
)

cc_library(
    name = "google_cloud_cpp_bigquery_bigquery_unified_mocks",
    testonly = True,
    srcs = [],
    hdrs = google_cloud_cpp_bigquery_bigquery_unified_mocks_hdrs,
    visibility = [
        ":__subpackages__",
        "//:__pkg__",
    ],
    deps = [
        ":google_cloud_cpp_bigquery_bigquery_unified",
        "@com_google_googletest//:gtest",
    ],
)

[cc_test(
    name = test.replace("/", "_").replace(".cc", ""),
    srcs = [test],
    deps = [
        ":google_cloud_cpp_bigquery_bigquery_unified",
        ":google_cloud_cpp_bigquery_bigquery_unified_mocks",
        "//google/cloud/bigquery_unified/testing_util:google_cloud_cpp_bigquery_bigquery_unified_testing_private",
        "@com_google_googletest//:gtest_main",
    ],
) for test in bigquery_unified_client_unit_tests]
